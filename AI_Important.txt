QUES 1. Write a prolog program to calculate the sum of two numbers.  
Code-> 
sum:-write('Enter first number'), 
read(X), 
write('Enter second number'), 
read(Y), 
Z is X+Y, 
write(Z). 


QUES 2. Write a Prolog program to implement max(X, Y, M) so that M is the maximum of two numbers X and Y. 
Code-> 
max(X,Y,M):-X>Y->M is X;M is Y.


QUES 3. Write a program in PROLOG to implement factorial (N, F) where F represents the factorial of a number N. 
Code-> 
factorial(0,1). 
factorial(1,1). 
factorial(N,F):- N>0, N1 is N-1,factorial(N1,F1),F is F1*N. 


QUES 4. Write a program in PROLOG to implement generate_fib(N,T) where T represents the Nth term of the fibonacci series. 
Code-> 
fibonacci(0,1). 
fibonacci(1,1). 
fibonacci(N,T):- N1 is N-1,N2 is N-2,fibonacci(N1,F1),fibonacci(N2,F2),T is F1+F2.


QUES 5. Write a Prolog program to implement GCD of two numbers.  
Code-> 
gcd(X,Y,Z):-X=Y -> Z is X. 
gcd(X,Y,Z):-X>Y,X1 is X-Y,gcd(X1,Y,Z1),Z is Z1. 
gcd(X,Y,Z):-Y>X,Y1 is Y-X,gcd(X,Y1,Z2),Z is Z2.


QUES 6. Write a Prolog program to implement power (Num,Pow, Ans) : where Num is raised to the power Pow to get Ans. 
Code-> 
mul(X,0,1). 
mul(0,Y,0). 
mul(X,1,X). 
mul(1,Y,1). 
mul(X,Y,T):-Y>0,Z is Y-1,mul(X,Z,T1),T is T1*X.


QUES 7. Prolog program to implement multi (N1, N2, R) : where N1 and N2 denotes the numbers to be multiplied and R represents the result. 
Code-> 
mul(X,0,0). 
mul(0,Y,0). 
mul(X,1,X). 
mul(1,Y,1). 
mul(X,Y,T):-X>0,Y>0,Z is Y-1,mul(X,Z,T1),T is T1+X.


QUES 8. Write a Prolog program to implement memb(X, L): to check whether X is a member of L or not. 
Code-> 
mem(X,[X|_]):-!. 
mem(X,[_|T]):- mem(X,T).


QUES 9. Write a Prolog program to implement conc (L1, L2, L3) where L2 is the list to be appended with L1 to get the resulted list L3.  
Code-> 
conc(L1,[],L1). 
conc([],[],[]). 
conc([],L2,L2). 
conc(L1,[H|T2],[H|T3]):-conc(L1,T2,T3).


QUES 10. Write a Prolog program to implement reverse (L, R) where List L is original and List R is reversed list. 
Code-> 
conc(L1,[],L1). 
conc([],[],[]). 
conc([],L2,L2). 
conc([H|T2],L1,[H|T3]):-conc(T2,L1,T3). 
rev([],[]). 
rev([H|T],R):-rev(T,R1),conc(R1,[H],R).


QUES 11. Write a program in PROLOG to implement palindrome (L) which checks whether a list L is a palindrome or not.  
Code-> 
conc(L1,[],L1). 
conc([],[],[]). 
conc([],L2,L2). 
conc([H|T2],L1,[H|T3]):-conc(T2,L1,T3). 
rev([],[]). 
rev([H|T],R):-rev(T,R1),conc(R1,[H],R). 
pal(X):- rev(X,R),X==R,write("List is palindrome").


QUES 12. Write a Prolog program to implement sumlist(L, S) so that S is the sum of a given list L.  
Code-> 
sum([],0). 
sum([X|T],R):- sum(T,R1), R is R1+X.


QUES 13. Write a Prolog program to implement two predicates evenlength(List) and oddlength(List) so that they are true if their argument is a list of even or odd length respectively.  
Code-> 
len([],0). 
len([X|T],R):- len(T,R1), R is R1+1. 
check(X):-evenlist(X). 
check(X):-oddlist(X). 
evenlist(X):- len(X,R), 0 is R mod 2, write("Even list").
oddlist(X):- len(X,R), 1 is R mod 2, write("Odd list").


QUES 14. Write a Prolog program to implement nth_element (N, L, X) where N is the desired position, L is a list and X represents the Nth element of L. 
Code-> 
nth_element(1, [X|_], X). 
nth_element(N, [_|T], X) :- 
	N > 1, 
	N1 is N - 1, 
	nth_element(N1, T, X).


QUES 15. Write a Prolog program to implement maxlist(L, M) so that M is the maximum number in the list.  
Code-> 
maxL([X],X). 
maxL([H|T],R):- maxL(T,R1), (H>R1-> R=H; R=R1).


QUES 16. Write a prolog program to implement insert_nth (I, N, L, R) that inserts an item I into Nth position of list L to generate a list R.  
Code-> 
insert(I,1,L,[I|L]). 
insert(I,N,[H|T],[H|R]):- 
N1 is N-1, 
insert(I,N1,T,R).


QUES 17. Write a Prolog program to implement delete_nth (N, L, R) that removes the element on Nth position from a list L to generate a list R. 
Code-> 
delete(1,[_|T],T). 
delete(N,[H|T],[H|R]):- N>1, 
N1 is N-1, 
delete(N1,T,R).


QUES 18. Write a program in PROLOG to implement merge (L1, L2, L3) where L1 is first ordered list and L2 is second ordered list and L3 represents the merged list. 
Code-> 
merge([],L2,L2). 
merge(L1,[],L1). 
merge([H1|T1],[H2|T2],[H1|T3]):- H1=<H2,merge(T1,[H2|T2],T3). 
merge([H1|T1],[H2|T2],[H2|T3]):- H1>H2,merge([H1|T1],T2,T3).


ADDITIONAL QUESTIONS 
 

Ques 1-> Make a list without Duplicate elements using PROLOG. 
Code-> 
mem(X,[X|_]):-!. 
mem(X,[_|T]):- mem(X,T). 
duplicate([],[]). 
duplicate([H|T],R):-mem(H,T),!, duplicate(T,R). 
duplicate([H|T],[H|R]):-duplicate(T,R).


Ques 2-> Make a program of NLP using Prolog. 
Code->	
sentence(A,C) :- 
	nounPhrase(A,B), 
	verbPhrase(B,C), 
	C = []. % Ensure all tokens are consumed. 
 
nounPhrase(A,C) :- 
	article(A,B), 
	noun(B,C). 
nounPhrase(A,C) :- 
	noun(A,C). 
 
verbPhrase(A,B) :- 
	verb(A,B). 
verbPhrase(A,C) :- 
	verb(A,B), 
	nounPhrase(B,C). 
verbPhrase(A,C) :- 
	verb(A,B), 
	prepositionPhrase(B,C). 
 
prepositionPhrase(A,C) :- 
	preposition(A,B), 
	nounPhrase(B,C). 
prepositionPhrase(A,C) :- 
	preposition(A,B), 
	noun(B,C). % Added to consume remaining tokens. 
 
article([a|X],X). 
article([the|X],X). 
 
noun([dog|X],X). 
noun([cow|X],X). 
noun([moon|X],X). 
 
verb([barked|X],X). 
verb([winked|X],X). 
 
preposition([at|X],X).


Ques 3-> Make a program to remove multiple occurrences of a element in list. 
Code-> 
delete(X,[],[]):- !. 
delete(X,L,R):- [Y|K]=L, [Y|M]=R, delete(X,K,M), (Y\=X). 
delete(X,L,R):- [X|K]=L, [Y|M]=R, delete(X,K,R), (Y\=X).


Ques 4-> Make a family tree using Prolog. 
Code-> 
parent(rakesh,ram). 
parent(rampyari,ram). 
parent(ram,shyam). 
parent(surili,shyam). 
parent(ram,shruti). 
parent(surili,shruti). 
parent(rakesh,ryan). 
parent(rampyari,ryan). 
parent(ryan,bheem). 
parent(jhanvi,bheem). 
parent(bheem,chutki). 
parent(tuntun,chutki). 
male(rakesh). 
male(ram). 
male(ryan). 
male(shyam). 
male(bheem). 
female(rampyari). 
female(surili). 
female(shruti). 
female(chutki). 
female(tuntun). 
feamle(jhanvi). 
grandparent(X,Z):-parent(X,Y),parent(Y,Z). 
grandechild(X,Y):-grandparent(Y,X). 
grandmother(X,Y):-grandparent(X,Y),female(X). 
grandfather(X,Y):-grandparent(X,Y),male(X). 
mother(X,Y):-parent(X,Y),female(X). 
father(X,Y):-parent(X,Y),male(X). 
sibling(Y,Z):-mother(X,Y),mother(X,Z),father(M,Y),father(M,Z). 
brother(X,Y):-sibling(X,Y),male(X). 
sister(X,Y):-sibling(X,Y),female(X). 
married(X,Y):-parent(X,Z),parent(Y,Z). 
aunt(X,Y):-parent(Z,Y),sister(X,Z). 
uncle(X,Y):-parent(Z,Y),brother(X,Z). 
kin(X,Y):-aunt(Y,X);uncle(Y,X). 
husband(X,Y):-married(X,Y),male(X). 
wife(X,Y):-married(X,Y),female(X). 
ancestors(X,Y):-parent(X,Y);grandparent(X,Y);uncle(X,Y);aunt(X,Y). 
descendant(X,Y):-ancestors(Y,X).


QUES 5 -> Delete specific element from list using Prolog. 
Code-> 
delete(_, [], []). 
delete(Elem, [Elem|Tail], Result) :- delete(Elem, Tail, Result). 
delete(Elem, [Head|Tail], [Head|Result]) :- delete(Elem, Tail, Result).